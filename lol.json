{
	"statement":
	{
		"equals":
		{
			"description":"A = B",
			"type":"logic statement",
			"variables":{"A":"Set","B":"Set"}
		},
		"is_in":
		{
			"description":"A is_in B <=> (foreach a: (a belongs A => a belongs B))",
			"type":"set theory statement",
			"variables":{"A":"Set","B":"Set"}
		},
		"includes":
		{
			"description":"A includes B <=> (foreach b: (b belongs B => b belongs A))",
			"type":"set theory statement",
			"variables":{"A":"Set","B":"Set"},
			"equivalent":[{"statement":"is_in","args": {"A":"B","B":"A"}}]
		},
		"belongs":
		{
			"description":"a belongs to B",
			"type":"set theory statement",
			"variables":{"a":"Set","B":"Set"}
		},
		"contains":
		{
			"description":"A contains b",
			"type":"set theory statement",
			"variables":{"A":"Set","b":"Set"},
			"equivalent":[{"statement":"belongs","args": {"a":"b","B":"A"}}]
		},
		"implies":
		{
			"description":"P implies Q",
			"type":"logic statement",
			"variables":{"P":"Proposition","Q":"Proposition"}
		},
		"implied":
		{
			"description":"Q implies P",
			"type":"logic statement",
			"variables":{"P":"Proposition","Q":"Proposition"},
			"equivalent":[{"statement":"implies", "args":{"P":"Q","Q":"P"}}]
		},
		"not":
		{
			"description":"not P",
			"type":"logic statement",
			"variables":{"P":"Proposition"}
		}
	},
	"type":
	{
		"lol": {"is_lol" :  true},
		"Set" : {}
	},
	"operation":
	{
		"union":
		{
			"description":"C = A union B => foreach a in A, b in B: a belongs C and b belongs C",
			"type":"set theory operation",
			"variables":{"A":"Set","B":"Set","_ret_C": "Set"},
			"returns":[
				{"statement":"includes", "args": {"A": "_ret_C", "B": "A"}},
				{"statement":"includes", "args": {"A": "_ret_C", "B": "B"}},
				"_ret_C"
				]
		},
		"inter":
		{
			"description":"A inter B => C (intersect)",
			"type":"set theory operation",
			"variables":{"A":"Set","B":"Set","_ret_C": "Set"},
			"returns":[
				{"statement":"is_in", "args": {"A": "_ret_C", "B": "A"}},
				{"statement":"is_in", "args": {"A": "_ret_C", "B": "B"}},
				"_ret_C"
				]
		},
		"singleton":
		{
			"description":"Returns a singleton containing A and only A",
			"type":"set theory operation",
			"variables":{"A":"Set","_ret_B": "Singleton"},
			"returns":[
				{"statement":"contains", "args": {"A": "_ret_B", "B": "A"}},
				"_ret_B"
				]
		},
		"pair":
		{
			"description":"Returns a singleton containing A and only A",
			"type":"set theory operation",
			"variables":{"A":"Set","B":"Set","_ret_C": "Pair"},
			"returns":[
				{"statement":"contains", "args": {"A": "_ret_C", "B": "A"}},
				{"statement":"contains", "args": {"A": "_ret_C", "B": "B"}},
				"_ret_C"
				]
		}
	},
	"theorem":
	{
		"axiom_0":
		{
			"description":"extensionality",
			"type":"axiom",
			"variables":{"A": "Set","B": "Set"},
			"suppose": [
				{"statement": "includes","args": {"A": "A","B": "B"}},
				{"statement": "includes","args": {"A": "B","B": "A"}}
			],
			"returns": [
				{"statement": "equals","args":{"A": "A","B": "B"}}
			]
		},

		"set_trans":
		{
			"description":"A in B in C => A in C",
			"type":"axiom",
			"variables":{"A": "Set","B": "Set","C": "Set"},
			"suppose": [
				{"statement": "includes","args": {"A": "A","B": "B"}},
				{"statement": "includes","args": {"A": "B","B": "C"}}
			],
			"returns": [
				{"statement": "includes","args":{"A": "A","B": "C"}}
			]
		},

		"transitivity":
		{
			"description":"A = B = C => A = C",
			"type":"axiom",
			"variables":{"A": "Set","B": "Set","C": "Set"},
			"suppose": [
				{"statement": "equals","args": {"A": "A","B": "B"}},
				{"statement": "equals","args": {"A": "B","B": "C"}}
			],
			"returns": [
				{"statement": "equals","args":{"A": "A","B": "C"}}
			]
		},

		"loltheorem":
		{
			"description":"(A inter B) = (A union B) => A = B",
			"type": "theorem",
			"variables": {"A": "Set","B": "Set", "_uinit_C": "Set"},
			"suppose": [
				{"statement":"equals","args": {
					"A": {
						"operation": "union",
						"args": {"A": "A","B": "B"}
					},
					"B": {
						"operation": "inter",
						"args": {"A": "A","B": "B"}
					}
				}},
				{"theorem":"axiom_0"},
				{"theorem":"set_trans"},
				{"theorem":"transitivity"}
			],
			"proof": {
				"let": {"_uinit_C": [{
						"operation": "inter",
						"args": {"A": "A","B": "B"}
					}]},
				"0": {
					"theorem": "transitivity",
					"args": {
						"A": {
							"operation": "union",
							"args": {"A": "A","B": "B"}
						},
						"B": {
							"operation": "inter",
							"args": {"A": "A","B": "B"}
						},
						"C": "_uinit_C"
					}
				},
				"1": {
					"theorem": "set_trans",
					"args": {"A": "A", "B": "_uinit_C", "C": "B"}
				},
				"2": {
					"theorem": "set_trans",
					"args": {"A": "B", "B": "_uinit_C", "C": "A"}
				},
				"proof": {
					"theorem": "axiom0",
					"args": {"A": "A", "B": "B"}
				}
			}
		}
	}
}